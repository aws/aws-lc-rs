rd_("ClThe public exponent, encoded in big-endian bytes without \xe2\x80\xa6CkThe public modulus, encoded in big-endian bytes without \xe2\x80\xa6AlThe block cipher identifier.BaReturns the algorithm identifier.CcReturns the KBKDF Counter HMAC Algorithm IdentifierBkReturns the SSKDF HMAC Algorithm IdentifierBfReturns the SSKDF Algorithm IdentifierBjReturns the identifier for this algorithm.BoReturns the <code>EncryptionAlgorithmId</code>.BbSerialization and deserialization.CcInitialization Vector (IV) cryptographic primitivesClThe additionally authenticated data (AAD) for an opening \xe2\x80\xa6BaCipher block chaining (CBC) mode.AcCounter (CTR) mode.B`Electronic Code Book (ECB) mode.AnA key to use for HMAC signing.BdAn HKDF OKM (Output Keying Material)AnA HKDF PRK (pseudorandom key).BgThe key is in a raw form. (X25519 only)AfAn authentication tag.lAn HMAC tag.B`The algorithm of the public key.DhConstructs a <code>StreamingEncryptingKey</code> for encrypting data \xe2\x80\xa6DiConstructs a <code>StreamingDecryptingKey</code> for decrypting using \xe2\x80\xa6DgConstructs an <code>EncryptingKey</code> operating in counter (CTR) \xe2\x80\xa6CkConstructs a cipher decrypting key operating in counter \xe2\x80\xa6DiConstructs an <code>EncryptingKey</code> operating in electronic code \xe2\x80\xa6DiConstructs an <code>DecryptingKey</code> operating in electronic code \xe2\x80\xa6CiKey-based Key Derivation Function (KBKDF) in Counter ModeCnKey-Encapsulation Mechanisms (KEMs), including support for \xe2\x80\xa6DfThe length that <code>Prk::expand()</code> should expand its input to.CoThe <code>OkmLength</code> given to <code>Prk::expand()</code>.BeReturns the size of the key in bytes.BkConstructs a new <code>SystemRandom</code>.DcConstructs a new key from the given <code>UnboundKey</code> and \xe2\x80\xa6AiNew Random Nonce SequenceDjNew TLS record sealing key. Only supports <code>AES_128_GCM</code> and \xe2\x80\xa6DjNew TLS record opening key. Only supports <code>AES_128_GCM</code> and \xe2\x80\xa6BfConstructs an <code>UnboundKey</code>.DfConstructs a <code>LessSafeKey</code> from an <code>UnboundKey</code>.BiConstructs a new <code>SealingKey</code>.BiConstructs a new <code>OpeningKey</code>.DcConstructs a <code>Counter32Builder</code> with all default values.DcConstructs a <code>Counter64Builder</code> with all default values.BcCreate a new header protection key.C`Constructs a new <code>UnparsedPublicKey</code>.AiConstructs a new context.DhConstructs a new <code>Salt</code> with the given value based on the \xe2\x80\xa6ChConstruct an HMAC signing key using the given digest \xe2\x80\xa6BcConstruct a new Key Encryption Key.BoConstruct a new <code>UnparsedPublicKey</code>.DgCreates a new <code>ParsedPublicKey</code> directly from public key \xe2\x80\xa6BlConstructs an <code>UnboundCipherKey</code>.DcConstructs a new <code>FixedLength</code> from pseudo-random bytes.ClCreates a new KEM encapsulation key from raw bytes. This \xe2\x80\xa6CmConstructs an <code>OaepPublicEncryptingKey</code> from a \xe2\x80\xa6CnConstructs an <code>OaepPrivateDecryptingKey</code> from a \xe2\x80\xa6CnConstructs an <code>Pkcs1PublicEncryptingKey</code> from a \xe2\x80\xa6CoConstructs an <code>Pkcs1PrivateDecryptingKey</code> from a \xe2\x80\xa6EhConstructs a new <code>Secret</code> for use with the associated <code>P_hash</code> \xe2\x80\xa6C`Returns the algorithm\xe2\x80\x99s associated AWS-LC nid.BeRSA Signature and Encryption Support.iNo value.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AaNo Cipher Context0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111AkA salt for HKDF operations.BbSome value of type <code>T</code>.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CcThe key is in an X.509 SubjectPublicKeyInfo format.CeAuthenticated Encryption with Associated Data (AEAD).BjFills <code>dest</code> with random bytes.0DkFills <code>out</code> with the output of the HKDF-Expand operation for \xe2\x80\xa6AoReturns the argument unchanged.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CdConstruct the <code>Aad</code> from the given bytes.111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111CfHMAC-based Extract-and-Expand Key Derivation Function.AnHMAC is specified in RFC 2104.DfInitialize the <em>AWS-LC</em> library. (This should generally not \xe2\x80\xa6BaCalls <code>U::from(self)</code>.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BbReturns the cipher operating mode.00000AgQUIC Header Protection.BnCryptographic pseudo-random number generation.DiProvides the private key \xe2\x80\x9cseed\xe2\x80\x9d for this <code>Ed25519</code> key \xe2\x80\xa6EdCalculates the HMAC of <code>data</code> using the key <code>key</code> in one step.CnFinalizes the HMAC calculation and returns the HMAC value. \xe2\x80\xa6BdReturns a signature for the message.BiReturns the signature of the message msg.EgSign <code>msg</code>. <code>msg</code> is digested using the digest algorithm from \xe2\x80\xa6BdReturns the size of the iv in bytes.CkPeforms the key wrap encryption algorithm using a block \xe2\x80\xa6CcPeforms the key wrap encryption algorithm using \xe2\x80\xa6CiTrait for types that can be serialized into a DER format.B`A 128-bit Initialization Vector.0CgA nonce for a single AEAD opening or sealing operation.AbTLS 1.2 (RFC 5246)AbTLS 1.3 (RFC 8446)CmPerforms a key agreement with a private key and the given \xe2\x80\xa6DhConstructs a new <code>Counter32</code> with internal identifier and \xe2\x80\xa6DhConstructs a new <code>Counter64</code> with internal identifier and \xe2\x80\xa6BfThe bytes provided for this public keyBdConstruct an empty <code>Aad</code>.A`Error reporting.ClProvides the limit on the number of nonces allowed to be \xe2\x80\xa6DeThe limit for the number of nonces the <code>Counter32</code> can \xe2\x80\xa61DeThe limit for the number of nonces the <code>Counter64</code> can \xe2\x80\xa6CkReturns the prepared Nonce that is used for key methods \xe2\x80\xa60DgParses the public key bytes and returns a <code>ParsedPublicKey</code>.B`PKCS#8 is specified in RFC 5208.BbAES Block Cipher with 128-bit key.kAES 128-bitkAES 192-bitBbAES Block Cipher with 256-bit key.kAES 256-bitAgAES Key Encryption Key.AaCFB 128-bit mode.AjA calculated digest value.CfThe key is in a hybrid form (SEC 1: Elliptic Curve \xe2\x80\xa6DkA random value constructed from a <code>SecureRandom</code> that hasn\xe2\x80\x99\xe2\x80\xa6BcSHA-224 as specified in FIPS 180-4.BcSHA-256 as specified in FIPS 180-4.BcSHA-384 as specified in FIPS 180-4.BcSHA-512 as specified in FIPS 180-4.AmQUIC sample for new key masksClEncapsulates a PRF algorithm and secret bytes to be used \xe2\x80\xa6BfKBKDF in Counter Mode with HMAC-SHA224AaSSKDF with SHA224AfSSKDF with HMAC-SHA224BfKBKDF in Counter Mode with HMAC-SHA256AaSSKDF with SHA256AfSSKDF with HMAC-SHA256BfKBKDF in Counter Mode with HMAC-SHA384AaSSKDF with SHA384AfSSKDF with HMAC-SHA384BfKBKDF in Counter Mode with HMAC-SHA512AaSSKDF with SHA512AfSSKDF with HMAC-SHA512ChX25519 (ECDH using Curve25519) as described in RFC 7748.DfSerializes the key as a DER-encoded <code>ECPrivateKey</code> (RFC \xe2\x80\xa6CfSerializes the key as a PKCS #8 private key structure.CdProvides the public key as a DER-encoded (X.509) \xe2\x80\xa62DfSerializes this <code>Ed25519KeyPair</code> into a PKCS#8 v1 document.011AmSerializes into a DER format.CnSerialize this <code>PublicEncryptingKey</code> to a X.509 \xe2\x80\xa6CmSerializes the public key in an uncompressed form (X9.62) \xe2\x80\xa6CjReturns the original bytes from which this key was parsed.1CeReturns the \xe2\x80\x9craw\xe2\x80\x9d bytes of the ED25519 public keyDgDER encode a RSA public key to (RFC 8017) <code>RSAPublicKey</code> \xe2\x80\xa6DhConstructs a <code>StreamingEncryptingKey</code> for encrypting data \xe2\x80\xa6CjThe resulting plaintext will be the same length as the \xe2\x80\xa6DiConstructs an <code>EncryptingKey</code> operating in cipher feedback \xe2\x80\xa6CjConstructs a cipher decrypting key operating in cipher \xe2\x80\xa6CgBlock and Stream Ciphers for Encryption and Decryption.DkFills <code>out</code> with the key derived using PBKDF2 with the given \xe2\x80\xa6DeCalculates <code>len</code> bytes of TLS PRF using the configured \xe2\x80\xa6BlSHA-2 and the legacy SHA-1 digest algorithm.DbReturns the digest of <code>data</code> using the given digest \xe2\x80\xa6AjThe HKDF-Expand operation.AhExpose the random value.CkFinalizes the digest calculation and returns the digest \xe2\x80\xa6ClFinishes the encryption operation, writing any remaining \xe2\x80\xa6ClFinishes the decryption operation, writing the remaining \xe2\x80\xa6CfThe format of the data the public key was parsed from.BcPBKDF2 derivation and verification.CkPeforms the key wrap decryption algorithm using a block \xe2\x80\xa6CcPeforms the key wrap decryption algorithm using \xe2\x80\xa6DeUpdates the message to digest with all the data in <code>data</code>.EgUpdates the HMAC with all the data in <code>data</code>. <code>update</code> may be \xe2\x80\xa6CkUpdates the internal state of the key with the provided \xe2\x80\xa60EhCalculates the HMAC of <code>data</code> using the signing key <code>key</code>, and \xe2\x80\xa6DhVerifies that a previously-derived (e.g., using <code>derive</code>) \xe2\x80\xa6EdVerify the signature <code>signature</code> of message <code>msg</code> with the \xe2\x80\xa6DhParses the public key and verifies <code>signature</code> is a valid \xe2\x80\xa6EeVerifies that <code>signature</code> is a valid signature of <code>message</code> \xe2\x80\xa6hAES-128.BbAES Block Cipher with 128-bit key.AbAES 128-bit cipherAbAES 192-bit cipherhAES-256.BbAES Block Cipher with 256-bit key.AbAES 256-bit cipherChA context for multi-step (Init-Update-Finish) digest \xe2\x80\xa6CkA context for multi-step (Init-Update-Finish) HMAC signing.BcVerification of Ed25519 signatures.AbThe length of key.CjKey pairs for signing messages (private key and public \xe2\x80\xa6BbAn RSA key pair, used for signing.mRSA key-size.ChThe length of the OKM (Output Keying Material) for a \xe2\x80\xa6BiA Key Wrap (KW) algorithm implementation.l2048-bit keyl3072-bit keyl4096-bit keyl8192-bit keyBmThe length in bytes of an authentication tag.B`The key is in an unknown format.BgReturns the next nonce in the sequence.BlProvides the current internal counter value.CjThe starting counter value for the <code>Counter32</code>.1CjThe starting counter value for the <code>Counter64</code>.DfDecrypts and unpads data provided in <code>in_out</code> in-place. \xe2\x80\xa6DiDecrypts the data provided in <code>in_out</code> in-place. Returns a \xe2\x80\xa6DcDecrypts the contents in <code>ciphertext</code> and writes the \xe2\x80\xa60DdPads and encrypts data provided in <code>in_out</code> in-place. \xe2\x80\xa6DiEncrypts the data provided in <code>in_out</code> in-place. Returns a \xe2\x80\xa6DbEncrypts the contents in <code>plaintext</code> and writes the \xe2\x80\xa60AkThe HKDF-Extract operation.AfThe length of the key.0CgThe key size in bytes to be used with the block cipher.BaReturns the algorithm key length.AgThe public modulus (n).AdThe length of a tag.CgTLS 1.2 PRF API\xe2\x80\x99s for usage in RFC 5246 and RFC 7627.CnReturns the slice from the buffer that was modified by the \xe2\x80\xa6BfAn AEAD key bound to a nonce sequence.Af<code>ChaCha20</code>.AlA generated PKCS#8 document.BcNIST FIPS 203 ML-KEM-512 algorithm.BcNIST FIPS 203 ML-KEM-768 algorithm.BeSHA-256 <code>P_hash</code> algorithmBeSHA-384 <code>P_hash</code> algorithmBeSHA-512 <code>P_hash</code> algorithmAnA serialized positive integer.BbSHA3-256 as specified in FIPS 202.BbSHA3-384 as specified in FIPS 202.BbSHA3-512 as specified in FIPS 202.AeSerialization formatsAgThe signature encoding.AhThe public exponent (e).CkConstruct a <code>PublicEncryptingKey</code> from X.509 \xe2\x80\xa6DeParses a DER-encoded <code>RSAPrivateKey</code> structure (RFC 8017).CgParses an RSA public key from either RFC8017 or RFC5280CeGenerate the new random value using <code>rng</code>.CfGenerate a new ephemeral private key for the given \xe2\x80\xa6CcGenerate a new private key for the given algorithm.CgGenerate an HMAC signing key using the given digest \xe2\x80\xa6AiGenerates a new key pair.CbGenerates a new key pair and returns the key pair.CfGenerate a new KEM decapsulation key for the given \xe2\x80\xa6CdGenerate a new RSA private key pair for use with \xe2\x80\xa6DbGenerate a RSA <code>KeyPair</code> of the specified key-strength.AdKey Wrap Algorithms.BkGenerate a new QUIC Header Protection mask.DfSerializes this <code>Ed25519KeyPair</code> into a PKCS#8 v2 document.DgTry to build a <code>PublicEncryptingKey</code> from the public key \xe2\x80\xa6CfReturns the signature of the message <code>msg</code>.C`This module contains unstable/experimental APIs.CiConstructs a new HMAC signing context using the given \xe2\x80\xa6AbAn AEAD Algorithm.BcA QUIC Header Protection Algorithm.AjA key agreement algorithm.AcA digest algorithm.AbAn HKDF algorithm.AbAn HMAC algorithm.AcA PBKDF2 algorithm.AcA cipher algorithm.oA KEM algorithmBiThe TLS PRF <code>P_hash</code> AlgorithmEd<code>Counter32</code> is an implementation of the <code>NonceSequence</code> trait.Ed<code>Counter64</code> is an implementation of the <code>NonceSequence</code> trait.CcECDH using the NSA Suite B P-256 (secp256r1) curve.CcECDH using the NSA Suite B P-384 (secp384r1) curve.CcECDH using the NSA Suite B P-521 (secp521r1) curve.BdNIST FIPS 203 ML-KEM-1024 algorithm.BkAll the AEADs we support use 96-bit nonces.AoA public key for key agreement.AkThe type of the public key.AlA serialized RSA public key.BhA deprecated alias for <code>Tag</code>.CiA public key signature returned from a signing operation.BfKey Agreement: ECDH, including X25519.AkThe key\xe2\x80\x99s AEAD algorithm.00000AfThe key\xe2\x80\x99s algorithm.BbThe algorithm for the private key.0BaThe algorithm for the public key.CgThe agreement algorithm associated with this public keyBiThe algorithm that this context is using.CjThe algorithm that was used to calculate the digest value.BgThe algorithm used to derive this salt.BaThe digest algorithm for the key.Dd<code>EcdsaSigningAlgorithm</code> which was used to create this \xe2\x80\xa6BnReturns the algorithm used by this public key.AmReturns the cipher algorithm.00AlReturns the cipher algorithmBoReturns the algorithm associated with this key.22CfReturn the algorithm associated with the given KEM \xe2\x80\xa60DeA <em>ring</em>-compatible crypto library using the cryptographic \xe2\x80\xa6AjThe internal block length.0BjThe block length of this cipher algorithm.DfConstructs a new <code>PaddedBlockEncryptingKey</code> cipher with \xe2\x80\xa6DfConstructs a new <code>PaddedBlockDecryptingKey</code> cipher with \xe2\x80\xa6DhConstructs a <code>StreamingEncryptingKey</code> for encrypting data \xe2\x80\xa6DiConstructs a <code>StreamingDecryptingKey</code> for decrypting using \xe2\x80\xa632DiConstructs a <code>StreamingEncryptingKey</code> for encrypting using \xe2\x80\xa61ChPanics if the underlying implementation is not FIPS, \xe2\x80\xa6CkProvides the current counter indicating how many nonces \xe2\x80\xa60CaReturns the <code>EnscapsulationKey</code> bytes.AiThe length of the nonces.ClReturns the slice of the buffer that was not modified by \xe2\x80\xa6C`Public key signatures: signing and verification.AmReferences a test input file.CiTrait for values that can be serialized into a raw formatBhA set of encrypted bytes produced by \xe2\x80\xa6CjThe key is in a compressed form (SEC 1: Elliptic Curve \xe2\x80\xa6BcNIST FIPS 203 ML-KEM-512 algorithm.BcNIST FIPS 203 ML-KEM-768 algorithm.ClAn AEAD key for authenticating and decrypting (\xe2\x80\x9copening\xe2\x80\xa6AjA key for opening packets.A`Serialized bytes0DjA private key for use (only) with <code>agree</code>. The signature of \xe2\x80\xa6BgSHA-512/256 as specified in FIPS 180-4.CkAn AEAD key for encrypting and signing (\xe2\x80\x9csealing\xe2\x80\x9d), \xe2\x80\xa6AjA key for sealing packets.AlRenamed to <code>Key</code>.ChAn AEAD key without a designated role or nonce sequence.AgReturns the first byte.CjConstructs an ECDSA key pair by parsing an unencrypted \xe2\x80\xa6ClConstructs an Ed25519 key pair by parsing an unencrypted \xe2\x80\xa6DjConstruct a <code>PrivateDecryptingKey</code> from the provided PKCS#8 \xe2\x80\xa6CiParses an unencrypted PKCS#8 DER encoded RSA private key.BaProvides the internal identifier.DdThe identifier for the <code>Counter32</code> - this value helps \xe2\x80\xa61DdThe identifier for the <code>Counter64</code> - this value helps \xe2\x80\xa6BaThe length of a finalized digest.0B`The public key for the key pair.AhProvides the public key.DjRetrieves the <code>PublicEncryptingKey</code> corresponding with this \xe2\x80\xa6AkThe required sample length.BnSingle-step Key Derivation Function using HMACDdSerializes this <code>EcdsaKeyPair</code> into a PKCS#8 v1 document.DfSerializes this <code>Ed25519KeyPair</code> into a PKCS#8 v1 document.EdVerify the signature <code>signature</code> of message <code>msg</code> with the \xe2\x80\xa6DhUses the public key to verify that <code>signature</code> is a valid \xe2\x80\xa6EaVerify <code>signature</code> for <code>msg</code> using <code>public_key</code>.ChAES-128 in GCM mode with 128-bit tags and 96 bit nonces.ChAES-192 in GCM mode with 128-bit tags and 96 bit nonces.ChAES-256 in GCM mode with 128-bit tags and 96 bit nonces.AlCipher algorithm identifier.AoIdentifier for a KEM algorithm.CmTrait for values that can be serialized into a big-endian \xe2\x80\xa6AhA key wrap block cipher.DdThe seed value for the <code>EdDSA</code> signature scheme using \xe2\x80\xa6ChAn initialization vector that must be unique for the \xe2\x80\xa6AhHKDF using HMAC-SHA-256.AhHKDF using HMAC-SHA-384.AhHKDF using HMAC-SHA-512.AcHMAC using SHA-224.AcHMAC using SHA-256.AcHMAC using SHA-384.AcHMAC using SHA-512.BeAn error parsing or validating a key.DfImmutable keys for use in situations where <code>OpeningKey</code>/\xe2\x80\xa6CjThe maximum length of a tag for the algorithms in this \xe2\x80\xa6BdNIST FIPS 203 ML-KEM-1024 algorithm.CnAn RSA signature encoding as described in RFC 3447 Section \xe2\x80\xa6BdAn error with absolutely no details.CiExposes the seed encoded as a big-endian fixed-length \xe2\x80\xa6CcExposes the private key encoded as a big-endian \xe2\x80\xa6CeProvides the public key elliptic curve point to a \xe2\x80\xa601CfProvides the public key elliptic curve point to an \xe2\x80\xa613BdSerializes into a big-endian format.CePerforms the decapsulate operation using this KEM \xe2\x80\xa6CePerforms the encapsulate operation using this KEM \xe2\x80\xa6CbReturns the length in bytes of the public modulus.CnSee <code>super::OpeningKey::open_within()</code> for details.CkAuthenticates and decrypts (\xe2\x80\x9copens\xe2\x80\x9d) data in place, \xe2\x80\xa6DeLike <code>OpeningKey::open_within()</code>, except it accepts an \xe2\x80\xa61BlAccess functions related to the private key.ClReturns a signature for the message corresponding to the \xe2\x80\xa6DfThe <code>digest</code> is padded using the padding algorithm from \xe2\x80\xa6CkA struct indicating the portion of a buffer written to, \xe2\x80\xa6BdAn ECDSA key pair, used for signing.A`Serialized bytesBaA secure random number generator.CgThe cryptographic shared secret output from the KEM \xe2\x80\xa6ClA secure random number generator where the random values \xe2\x80\xa6BkThe key is in an uncompressed form (X9.62).AmSerializes into a raw format.DfConstructs a new <code>PaddedBlockDecryptingKey</code> cipher with \xe2\x80\xa6CmThe size of the chaining value of the digest function, in \xe2\x80\xa60AkThe value returned from \xe2\x80\xa6C`Single-step Key Derivation Function using digestBeThe Key Wrapping Algorithm IdentifierCgA cipher decryption key that does not perform block \xe2\x80\xa6CgA cipher encryption key that does not perform block \xe2\x80\xa6CgA Key Wrap with Padding (KWP) algorithm implementation.DkThe maximum block length (<code>Algorithm::block_len</code>) of all the \xe2\x80\xa6AmA sequences of unique nonces.AfAn RSA-OAEP algorithm.AjThe cipher operating mode.B`Parameters for RSA verification.CdThe Transport Layer Security (TLS) protocol version.AiConstant-time operations.CdGenerate a new RSA private key pair for use with \xe2\x80\xa6DbGenerate a RSA <code>KeyPair</code> of the specified key-strength.BaReturns the RSA key size in bits.00000DhConstructs a <code>StreamingEncryptingKey</code> for encrypting data \xe2\x80\xa6CoConstruct a new <code>Prk</code> directly with the given value.CgAuthenticates and decrypts (\xe2\x80\x9copens\xe2\x80\x9d) data in place.D`See <code>super::OpeningKey::open_in_place()</code> for details.1DgLike <code>OpeningKey::open_in_place()</code>, except it accepts an \xe2\x80\xa62BlOpens (authenticates and decrypts) a packet.DfReturns a <code>OpeningKeyPreparedNonce</code> containing the next \xe2\x80\xa6DfReturns a <code>SealingKeyPreparedNonce</code> containing the next \xe2\x80\xa6CfReturns a mutable slice of the buffer that was not \xe2\x80\xa6CmDeprecated. Renamed to <code>seal_in_place_append_tag</code>.CoDeprecated. Renamed to <code>seal_in_place_append_tag()</code>.BdSeals (encrypts and signs) a packet.ChIndicates whether the underlying implementation is FIPS.DhParses the public key and verifies <code>signature</code> is a valid \xe2\x80\xa6ClThe number of bytes for an AES-CBC initialization vector \xe2\x80\xa6ClThe number of bytes for an AES-CFB initialization vector \xe2\x80\xa6ClThe number of bytes for an AES-CTR initialization vector \xe2\x80\xa6AcAn AES Block CipherAjElliptic curve public key.BaAn Ed25519 key pair, for signing.B`Length of a 128-bit IV in bytes.DiThe maximum output length (<code>Algorithm::output_len</code>) of all \xe2\x80\xa6CaRSA PSS padding using SHA-256 for RSA signatures.CaRSA PSS padding using SHA-384 for RSA signatures.CaRSA PSS padding using SHA-512 for RSA signatures.B`Renamed to <code>Context</code>.CeGenerates a new key pair and returns the key pair \xe2\x80\xa60AnThe underlying HMAC algorithm.CmKey-based Key Derivation Function (KBKDF) in Counter Mode \xe2\x80\xa6BbReturns the RSA key size in bytes.000BhReturns the RSA signature size in bytes.0EbImplementations of <code>NonceSequence</code> for use with <code>BoundKey</code>s.ClAES-128 in GCM mode with nonce reuse resistance, 128-bit \xe2\x80\xa6CjThe number of bytes in an AES 128-bit key Length of an \xe2\x80\xa6CjThe number of bytes in an AES 192-bit key Length of an \xe2\x80\xa6ClAES-256 in GCM mode with nonce reuse resistance, 128-bit \xe2\x80\xa6CjThe number of bytes in an AES 256-bit key Length of an \xe2\x80\xa6A`Serialized bytesAkElliptic curve private key.CkParameters for <code>EdDSA</code> signing and verification.BfA parsed public key for key agreement.BoA parsed public key for signature verification.BlThe length of the output of SHA-1, in bytes.AmMerged into <code>Key</code>.CnPerforms a key agreement with an ephemeral private key and \xe2\x80\xa6ClReturns the block cipher algorithm identifier configured \xe2\x80\xa6CjReturns the max ciphertext size that will be output by \xe2\x80\xa60AoMaximum modulus length in bits.AoMinimum modulus length in bits.CjReturns the minimum plaintext buffer size required for \xe2\x80\xa60CbThe key\xe2\x80\x99s associated <code>TlsProtocolId</code>.0Dc<code>NonceSequenceBuilder</code> facilitates the building of a \xe2\x80\xa60CkA serializable decapulsation key usable with KEMs. This \xe2\x80\xa6AbEd25519 Public KeyCdA serializable encapsulation key usable with KEM \xe2\x80\xa6ChThe key-encryption key used with the selected cipher \xe2\x80\xa6DiThe maximum chaining length (<code>Algorithm::chaining_len</code>) of \xe2\x80\xa6BeRSA-OAEP with SHA1 Hash and SHA1 MGF1AgPBKDF2 using HMAC-SHA1.A`Serialized bytesCdPKCS#1 1.5 padding using SHA-256 for RSA signatures.CdPKCS#1 1.5 padding using SHA-384 for RSA signatures.CdPKCS#1 1.5 padding using SHA-512 for RSA signatures.BmA key bound to a particular cipher algorithm.CeThe digest algorithm this HMAC algorithm is based on.BmConstructs an ECDH key from private key bytesEeGenerates a <code>Ed25519KeyPair</code> using the <code>rng</code> provided, then \xe2\x80\xa6CnImports a digest value provide by an external source. This \xe2\x80\xa6DhConstructs a <code>StreamingEncryptingKey</code> for encrypting data \xe2\x80\xa6BkChaCha20-Poly1305 as described in RFC 7539.:CdThe contextual data used to encrypt or decrypt data.0DhThe length in bytes of the <code>packet_length</code> field in a SSH \xe2\x80\xa6BnThe length of the output of SHA-224, in bytes.BnThe length of the output of SHA-256, in bytes.BnThe length of the output of SHA-384, in bytes.BnThe length of the output of SHA-512, in bytes.CgAn unparsed, possibly malformed, public key for key \xe2\x80\xa6CmAn unparsed, possibly malformed, public key for signature \xe2\x80\xa6CcComputes the KEM encapsulation key from the KEM \xe2\x80\xa6CnReturns a boolean indicator if this RSA key is an approved \xe2\x80\xa60DdPads and encrypts data provided in <code>in_out</code> in-place. \xe2\x80\xa6DhEncrypts the data provided in <code>in_out</code> in-place using the \xe2\x80\xa6DoVerify the signature <code>signature</code> of <code>digest</code> with the \xe2\x80\xa6DhUses the public key to verify that <code>signature</code> is a valid \xe2\x80\xa6BlDO NOT USE. This function is required by \xe2\x80\xa6CmPeforms the key wrap padding encryption algorithm using a \xe2\x80\xa6CkPeforms the key wrap padding encryption algorithm using \xe2\x80\xa6BeRSA-OAEP with SHA1 Hash and SHA1 MGF1AiPBKDF2 using HMAC-SHA256.AiPBKDF2 using HMAC-SHA384.AiPBKDF2 using HMAC-SHA512.A`Serialized bytesBiAEAD Cipher key using a randomized nonce.AjSSKDF algorithm using HMACBmComputes the public key from the private key.0CkReturns the max plaintext that could be decrypted using \xe2\x80\xa6CkReturns the max plaintext that could be encrypted using \xe2\x80\xa6CjReturns the length in bytes of the key pair\xe2\x80\x99s public \xe2\x80\xa6DjParses a DER-encoded <code>RSAPublicKey</code> structure (RFC 8017) to \xe2\x80\xa6BbAn identifier for a KEM algorithm.C`An ephemeral private key for use (only) with \xe2\x80\xa6CbA key for generating QUIC Header Protection masks.CkAn RSA public key used for encrypting plaintext that is \xe2\x80\xa6BbLow-level API for RSA public keys.CdAEAD Encryption key used for TLS protocol record \xe2\x80\xa60ClConstructs an Ed25519 key pair from the private key seed \xe2\x80\xa6DhConstructs a <code>StreamingEncryptingKey</code> for encrypting data \xe2\x80\xa6CmPeforms the key wrap padding decryption algorithm using a \xe2\x80\xa6CkPeforms the key wrap padding decryption algorithm using \xe2\x80\xa6ClVerification of ASN.1 DER-encoded ECDSA signatures using \xe2\x80\xa6BiRSA-OAEP with SHA256 Hash and SHA256 MGF1BiRSA-OAEP with SHA384 Hash and SHA384 MGF1BiRSA-OAEP with SHA512 Hash and SHA512 MGF1CeAn RSA private key used for decrypting ciphertext \xe2\x80\xa6BbEncoding type for an RSA signatureAlSSKDF algorithm using digestCgSingle-step (One-step) Key Derivation Function HMAC \xe2\x80\xa6CgDeserializes a DER-encoded private key structure to \xe2\x80\xa60CnAuthenticates and decrypts (\xe2\x80\x9copens\xe2\x80\x9d) data into another \xe2\x80\xa6CfVerification of fixed-length (PKCS#11 style) ECDSA \xe2\x80\xa6AkAn ECDSA signing algorithm.A`Serialized bytesBcRSA Encryption Algorithm IdentifierBiKBKDF in Counter Mode with HMAC AlgorithmBbThe format of a parsed public key.DhA type that can be returned by <code>aws_lc_rs::rand::generate()</code>.CbThe length of the output of SHA-512/256, in bytes.BcA signature verification algorithm.DkConstructs a <code>Nonce</code> with the given value, assuming that the \xe2\x80\xa6CjReturns the decrypted, but unauthenticated, packet length.CmEncrypts and signs (\xe2\x80\x9cseals\xe2\x80\x9d) data in place with extra \xe2\x80\xa6ClVerification of ASN.1 DER-encoded ECDSA signatures using \xe2\x80\xa6De<em>Not recommended.</em> Verification of ASN.1 DER-encoded ECDSA \xe2\x80\xa600101111BdThe length of an Ed25519 public key.<BiRSA-OAEP with SHA256 Hash and SHA256 MGF1BjRSA-OAEP with SHA384 Hash and SHA384  MGF1BiRSA-OAEP with SHA512 Hash and SHA512 MGF1CiSingle-step (One-step) Key Derivation Function Digest \xe2\x80\xa6BjA key for streaming decryption operations.BjA key for streaming encryption operations.CfVerification of fixed-length (PKCS#11 style) ECDSA \xe2\x80\xa600000CbKey-based Derivation Function Algorithm IdentifierBfAn RSA-OAEP public key for encryption.CkA key operation with a precomputed nonce from a key\xe2\x80\x99s \xe2\x80\xa60ClPanics if the underlying implementation is not using CPU \xe2\x80\xa6EoReturns <code>Ok(())</code> if <code>a == b</code> and <code>Err(error::Unspecified)</code> \xe2\x80\xa6>>>A`Serialized bytesBgAn RSA-OAEP private key for decryption.CdA cipher decryption key that performs block padding.CdA cipher encryption key that performs block padding.BiRSA PKCS1-v1.5 public key for encryption.CjVerification of signatures using RSA keys of 2048-8192 \xe2\x80\xa600BmSHA-1 as specified in FIPS 180-4. Deprecated.ClConstructs an Ed25519 key pair from the private key seed \xe2\x80\xa6EhRetrieve <code>SskdfHmacAlgorithm</code> using the <code>SskdfHmacAlgorithmId</code> \xe2\x80\xa6CmEncrypts and signs (\xe2\x80\x9cseals\xe2\x80\x9d) data in place, appending \xe2\x80\xa6EeAccepts a <code>Nonce</code> and <code>Aad</code> construction that is unique for \xe2\x80\xa61DgLike <code>SealingKey::seal_in_place_append_tag()</code>, except it \xe2\x80\xa62CfVerification of fixed-length (PKCS#11 style) ECDSA \xe2\x80\xa600BjRSA PKCS1-v1.5 private key for decryption.CeThe chacha20-poly1305@openssh.com AEAD-ish construct.DkConstructs a <code>Nonce</code> with the given value, assuming that the \xe2\x80\xa6ClVerification of ASN.1 DER-encoded ECDSA signatures using \xe2\x80\xa6A`Serialized bytesB`An ECDSA verification algorithm.===CjVerification of signatures using RSA keys of 3072-8192 \xe2\x80\xa6ClConstructs an Ed25519 key pair by parsing an unencrypted \xe2\x80\xa6ChRetrieve <code>SskdfDigestAlgorithm</code> using the \xe2\x80\xa6BoEncrypts and signs (\xe2\x80\x9cseals\xe2\x80\x9d) data in place.00DiLike <code>SealingKey::seal_in_place_separate_tag()</code>, except it \xe2\x80\xa61;ChIndicates whether the underlying implementation is FIPS.CiRetrieve <code>KbkdfCtrHmacAlgorithm</code> using the \xe2\x80\xa6B`HKDF using HMAC-SHA-1. Obsolete.AkHMAC using SHA-1. Obsolete.CkSigning of ASN.1 DER-encoded ECDSA signatures using the \xe2\x80\xa600000DeCalculates <code>len</code> bytes of TLS PRF using the configured \xe2\x80\xa6ClSigning of fixed-length (PKCS#11 style) ECDSA signatures \xe2\x80\xa600000CmReturns the value, ordered from significant byte to least \xe2\x80\xa6CiConstructs an ECDSA key pair from the private key and \xe2\x80\xa644422242CjVerification of signatures using RSA keys of 1024-8192 \xe2\x80\xa6CjVerification of signatures using RSA keys of 2048-8192 \xe2\x80\xa611")