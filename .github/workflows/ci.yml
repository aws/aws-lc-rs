name: ci

on:
  pull_request:
    branches:
      - '*'

env:
  RUST_BACKTRACE: 1
  # We can pin the version if nightly is too unstable.
  # Otherwise, we test against the latest version.
  RUST_NIGHTLY_TOOLCHAIN: nightly

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: -- --check --verbose

  clippy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # fail on warnings
        args: ["-D warnings"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy
          args: --all-features --all-targets -- ${{ matrix.args }}

  apidiff:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - name: Install cargo-public-api
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install
          args: cargo-public-api
      - name: Perform API Diff
        uses: actions-rs/cargo@v1.0.3
        with:
          command: public-api
          args: --all-features --deny changed --deny removed --diff-git-checkouts ${{ github.event.pull_request.head.sha }} ${{ github.event.pull_request.base.sha }}

  test:
    name: tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust: [stable]
        os: [ubuntu-latest, macOS-latest]
        args:
          - --release --all-targets
          - --no-default-features
          - --no-default-features --features ring-io
          - --no-default-features --features alloc
          - --no-default-features --features threadlocal
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Run cargo test
        uses: actions-rs/cargo@v1.0.3
        with:
          command: test
          args: ${{ matrix.args }}

  # TODO: add bot to post coverage details to PR, or upload results to AWS account.
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install 
          args: cargo-llvm-cov

      - name: Run coverage
        uses: actions-rs/cargo@v1.0.3
        with:
          command: llvm-cov
          args: --html --no-fail-fast

  asan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
      - name: Run address sanitizers
        uses: actions-rs/cargo@v1.0.3
        env:
          ASAN_OPTIONS: detect_leaks=1
          RUSTFLAGS: -Zsanitizer=address
          RUSTDOCFLAGS: -Zsanitizer=address
        with:
          command: test 
          args: --lib --bins --tests --examples --target x86_64-unknown-linux-gnu --features asan

  asan-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
      - name: Run address sanitizers
        uses: actions-rs/cargo@v1.0.3
        env:
          ASAN_OPTIONS: detect_leaks=1
          RUSTFLAGS: -Zsanitizer=address
          RUSTDOCFLAGS: -Zsanitizer=address
        with:
          command: test
          args: --release --lib --bins --tests --examples --target x86_64-unknown-linux-gnu --features asan

  s2n-quic-integration:
    name: s2n-quic-integration
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          override: true
      - name: Run s2n-quic integration
        run: |
          ./scripts/run-s2n-quic-integration.sh

  rustls-integration:
    name: rustls-integration
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          override: true
      - name: Run rustls integration
        run: |
          ./scripts/run-rustls-integration.sh
