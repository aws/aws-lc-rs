name: ci

on:
  pull_request:
    branches:
      - '*'

env:
  RUST_BACKTRACE: 1
  # We can pin the version if nightly is too unstable.
  # Otherwise, we test against the latest version.
  RUST_NIGHTLY_TOOLCHAIN: nightly
  # Mirai version tag, updates this whenever a new version
  # is released.
  MIRAI_TAG: v1.1.2

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: -- --check --verbose

  clippy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate_dir: [ "aws-lc-sys", "aws-lc-fips-sys", "aws-lc-rust" ]
        features:
          - ""
          - "--features fips"
        exclude:
          - crate_dir: aws-lc-sys
            features: "--features fips"
          - crate_dir: aws-lc-fips-sys
            features: "--features fips"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true
          components: clippy
      - name: Run cargo clippy
        working-directory: ${{ matrix.crate_dir }}
        run: cargo clippy ${{ matrix.features }} --all-targets -- -W clippy::all -W clippy::pedantic -D warnings

  apidiff:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate_dir: [ "aws-lc-sys", "aws-lc-fips-sys", "aws-lc-rust" ]
        diff_target: [ "branch", "published" ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - name: Install cargo-public-api
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install
          args: cargo-public-api
      - name: Install rust-script
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install
          args: rust-script
      - name: Perform API Diff (Target Branch)
        if: matrix.diff_target == 'branch'
        working-directory: ${{ matrix.crate_dir }}
        run: cargo public-api diff --deny changed --deny removed ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
      - name: Perform API Diff (Published)
        if: matrix.diff_target == 'published'
        working-directory: ${{ matrix.crate_dir }}
        shell: bash
        run: |
          CRATE_NAME=$("${GITHUB_WORKSPACE}"/scripts/tools/cargo-dig.rs -n)
          CRATE_VERSION=$(cargo search --limit 1 ${CRATE_NAME} | head -n 1 | sed -e 's/[^"]*"\([^"]*\)".*/\1/')
          cargo public-api diff --deny changed --deny removed "${CRATE_VERSION}"

  #  dependency-review:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: 'Checkout Repository'
  #        uses: actions/checkout@v3
  #      - name: 'Dependency Review'
  #        uses: actions/dependency-review-action@v3
  #        with:
  #          allow-licenses: Apache-2.0, ISC, MIT, MIT-0

  # This step won't be needed once "dependency-review" is enabled
  audit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - name: Install cargo-audit
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install
          args: cargo-audit
      - name: Perform Security Audit
        uses: actions-rs/cargo@v1.0.3
        with:
          command: audit

  # This step won't be needed once "dependency-review" is enabled
  license:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - name: Install cargo-license
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install
          args: cargo-license
      - name: Report all dependency licenses
        uses: actions-rs/cargo@v1.0.3
        with:
          command: license

  udeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true

      - name: Install cargo-udeps
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install
          args: cargo-udeps

      - name: Run cargo udeps
        run: cargo udeps --workspace --all-targets
        env:
          RUSTC_WRAPPER: ""

  aws-lc-rust-test:
    name: aws-lc-rust tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust: [ stable ]
        os: [ ubuntu-latest, macOS-latest ]
        target: [ native, aarch64-unknown-linux-gnu, i686-unknown-linux-gnu ]
        args:
          - --all-targets
          - --release --all-targets --features ring-benchmarks
          - --no-default-features --features non-fips
          - --no-default-features --features non-fips,ring-io
          - --no-default-features --features non-fips,ring-sig-verify
          - --no-default-features --features non-fips,alloc
        exclude:
          - rust: stable
            os: macOS-latest
            target: aarch64-unknown-linux-gnu
          - rust: stable
            os: macOS-latest
            target: i686-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.target != 'native' && matrix.target || '' }}

      - name: Install cross
        if: ${{ matrix.target != 'native' }}
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install
          args: cross

      - name: Run cargo test
        working-directory: ./aws-lc-rust
        if: ${{ matrix.target == 'native' }}
        run: cargo test ${{ matrix.args }} ${{ matrix.target != 'native' && format('--target {0}', matrix.target) || '' }}

      - name: Run cargo cross test
        working-directory: ./aws-lc-rust
        if: ${{ matrix.target != 'native' }}
        run: cross test ${{ matrix.args }} ${{ matrix.target != 'native' && format('--target {0}', matrix.target) || '' }}

  fips-test:
    name: aws-lc-rust fips-tests
    runs-on: ${{ matrix.os }}
    env:
      CC: clang
      CXX: clang++
    strategy:
      fail-fast: false
      matrix:
        rust: [ stable ]
        os: [ ubuntu-latest ]
        args:
          - --release --all-targets --features fips
          - --no-default-features --features fips
          - --no-default-features --features fips,ring-io
          - --no-default-features --features fips,ring-sig-verify
          - --no-default-features --features fips,alloc
          - --no-default-features --features fips,bindgen
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Run cargo test
        working-directory: ./aws-lc-rust
        run: cargo test ${{ matrix.args }}

  aws-lc-rust-coverage:
    name: aws-ls-rust coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          lfs: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: actions-rs/cargo@v1.0.3
        with:
          command: install
          args: cargo-llvm-cov

      # TODO: add bot to post coverage details to PR, or upload results to AWS
      # account. Using --html can give us more insight which regions are missing
      # coverage immediately.
      - name: Run coverage
        working-directory: ./aws-lc-rust
        run: cargo llvm-cov --no-fail-fast --fail-under-lines 95 --ignore-filename-regex "aws-lc-sys/*"

  mirai-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          lfs: true

      # Update toolchain when fixed: https://github.com/facebookexperimental/MIRAI/issues/1188
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: nightly-2022-09-05
          profile: minimal
          components: rust-src, rustc-dev, llvm-tools-preview

      - name: Cache Cargo
        uses: actions/cache@v3.0.5
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-mirai-${{ env.MIRAI_TAG }}

      # https://github.com/facebookexperimental/MIRAI/blob/main/documentation/InstallationGuide.md#installing-mirai-into-cargo
      - name: Install MIRAI
        run: |
          git clone --depth 1 --branch ${{ env.MIRAI_TAG }} https://github.com/facebookexperimental/MIRAI.git
          cd MIRAI
          cargo install --force --path ./checker --no-default-features
          cd ../

      - name: Run MIRAI
        run: |
          cargo mirai

  aws-lc-rust-asan:
    name: aws-lc-rust asan
    strategy:
      matrix:
        args:
          -
          - --release
        features:
          - --features asan
          - --no-default-features --features fips,asan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
      - name: Run address sanitizers
        env:
          ASAN_OPTIONS: detect_leaks=1
          RUSTFLAGS: -Zsanitizer=address
          RUSTDOCFLAGS: -Zsanitizer=address
        working-directory: ./aws-lc-rust
        run: cargo test ${{ matrix.args }} --lib --bins --tests --examples --target x86_64-unknown-linux-gnu --features asan

  s2n-quic-integration:
    name: s2n-quic-integration
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macOS-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          override: true
      - name: Run s2n-quic integration
        working-directory: ./aws-lc-rust
        run: |
          ./scripts/run-s2n-quic-integration.sh

  rustls-integration:
    name: rustls-integration
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macOS-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          override: true
      - name: Run rustls integration
        working-directory: ./aws-lc-rust
        run: |
          ./scripts/run-rustls-integration.sh
