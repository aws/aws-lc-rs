name: cross

on:
  push:
    branches:
      - '*'
      - '!generate/aws-lc-*'
  pull_request:
    branches:
      - '*'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  # We can pin the version if nightly is too unstable.
  # Otherwise, we test against the latest version.
  RUST_NIGHTLY_TOOLCHAIN: nightly

jobs:
  aws-lc-rs-cross-test:
    if: github.repository_owner == 'aws'
    name: aws-lc-rs cross tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        target:
          - arm-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
          - arm-linux-androideabi
          - armv7-linux-androideabi
          - aarch64-linux-android
          - powerpc64-unknown-linux-gnu
          - powerpc-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - s390x-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@master
        id: toolchain
        with:
          toolchain: ${{ (matrix.target == 'riscv64gc-unknown-linux-gnu'  && '1.72.1') || 'stable' }}
          target: ${{ matrix.target }}
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: Install cross
        run: cargo install cross ${{ (matrix.target == 'riscv64gc-unknown-linux-gnu'  && '--locked') || '' }} --git https://github.com/cross-rs/cross
      - if: ${{ matrix.target == 'riscv64gc-unknown-linux-gnu' }}
        run: |
          cargo update
          cargo update -p clap --precise 4.4.18
      - name: Cross-compilation
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'i686-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-musl'}}
        run: cross test -p aws-lc-rs --features unstable --target ${{ matrix.target }}
      - name: Cross-compilation w/ bindgen
        run: cross test -p aws-lc-rs --release --features bindgen,unstable --target ${{ matrix.target }}

  aws-lc-rs-ios-aarch64:
    if: github.repository_owner == 'aws'
    name: iOS aarch64 cross-platform build
    runs-on: macos-13-xlarge
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@master
        id: toolchain
        with:
          toolchain: stable
          target: aarch64-apple-ios-sim
      - name: Install bash
        run: brew install bash
      - name: iOS Simulator Runner
        run: ./scripts/ci/ios-simulator-runner.sh

  aws-lc-rs-ios-x86_64:
    if: github.repository_owner == 'aws'
    name: iOS x86-64 cross-platform build
    runs-on: macos-13-xlarge
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@master
        id: toolchain
        with:
          toolchain: stable
          target: x86_64-apple-ios
      - name: Debug build for `x86_64-apple-ios`
        run: cargo build -p aws-lc-rs --target x86_64-apple-ios --features bindgen
      - name: Release build for `x86_64-apple-ios`
        run: cargo build -p aws-lc-rs --release --target x86_64-apple-ios --features bindgen


  aws-lc-rs-windows-mingw:
    if: github.repository_owner == 'aws'
    name: x86_64-pc-windows-gnu
    runs-on: windows-latest
    steps:
      - uses: ilammy/setup-nasm@v1
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@master
        id: toolchain
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu
      - name: Debug Test on `x86_64-pc-windows-gnu`
        run: cargo test -p aws-lc-rs --target x86_64-pc-windows-gnu --features bindgen
      - name: Release test on `x86_64-pc-windows-gnu`
        run: cargo test -p aws-lc-rs --release --target x86_64-pc-windows-gnu --features bindgen
