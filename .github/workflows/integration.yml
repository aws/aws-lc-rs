name: integration

on:
  push:
    branches:
      - '*'
      - '!generate/aws-lc-*'
  pull_request:
    branches:
      - '*'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  # We can pin the version if nightly is too unstable.
  # Otherwise, we test against the latest version.
  RUST_NIGHTLY_TOOLCHAIN: nightly
  DEBIAN_FRONTEND: noninteractive

jobs:
  s2n-quic-integration:
    if: github.repository_owner == 'aws'
    name: s2n-quic-integration
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-13, macos-latest ]
    env:
      GIT_CLONE_PROTECTION_ACTIVE: false
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: Run s2n-quic integration
        working-directory: ./aws-lc-rs
        run: |
          ./scripts/run-s2n-quic-integration.sh

  rustls-integration:
    if: github.repository_owner == 'aws'
    name: rustls-integration
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-13, macos-latest ]
        latest: [ 0, 1 ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: Install cargo-download
        run: cargo install cargo-download cargo-show
      - name: Run rustls integration
        working-directory: ./aws-lc-rs
        run: |
          ./scripts/run-rustls-integration.sh ${{ matrix.latest == 1 && '--latest-release' }} --cleanup

  windows-debug-crt-static-test:
    if: github.repository_owner == 'aws'
    name: "Windows debug w/ crt-static Test"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: run-windows-debug-crt-static-test
        working-directory: ./aws-lc-rs
        shell: bash
        run: |
          ./scripts/run-windows-debug-crt-static-test.sh

  ssl-test:
    if: github.repository_owner == 'aws'
    name: "SSL Test"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: install bindgen-cli
        run: cargo install --force --locked bindgen-cli
      - uses: ilammy/setup-nasm@v1
      - name: "Test aws-lc-sys package w/ SSL enabled"
        working-directory: ./aws-lc-sys
        run: cargo package --features ssl
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v4
      - name: "Test aws-lc-fips-sys package w/ SSL enabled"
        working-directory: ./aws-lc-fips-sys
        run: cargo package --features ssl

  links-crate-tests:
    if: github.repository_owner == 'aws'
    name: sys crate tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-13, macos-latest, windows-latest ]
        features: [ aws-lc-rs, aws-lc-rs-fips, aws-lc-sys, aws-lc-fips-sys ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: Install NASM on Windows
        if: runner.os == 'Windows'
        uses: ilammy/setup-nasm@v1
      - name: Setup Go >=v1.18
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v4
      - name: Run cargo test
        working-directory: ./links-testing
        run: cargo test --features ${{ matrix.features }} --no-default-features
      - name: Run cargo run
        working-directory: ./links-testing
        run: cargo run --features ${{ matrix.features }} --no-default-features

  publish-dry-run-version-check:
    if: github.repository_owner == 'aws'
    name: publish dry-run version check
    runs-on: ubuntu-latest
    outputs:
      skip-aws-lc-rs: ${{ steps.check.outputs.skip-aws-lc-rs }}
      reason: ${{ steps.check.outputs.reason }}
    steps:
      - uses: actions/checkout@v3
      - name: Check sys crate version compatibility
        id: check
        run: |
          # Run the compatibility check script
          if output=$(./scripts/ci/check_sys_crate_compatibility.sh 2>&1); then
            should_skip=$(echo "$output" | grep "^SHOULD_SKIP=" | cut -d'=' -f2-)
            echo "Detected: SHOULD_SKIP=$should_skip"
            echo "skip-aws-lc-rs=${should_skip}" >> $GITHUB_OUTPUT
            echo "reason=" >> $GITHUB_OUTPUT
            echo Successful publish compatibility check
            echo "$output"
            exit 0
          else
            exit_code=$?
            echo Failed publish compatibility check with exit code $exit_code
            echo "$output"

            if [ $exit_code -eq 1 ]; then
              # Script returned 1 (incompatible - should skip)
              echo "skip-aws-lc-rs=true" >> $GITHUB_OUTPUT

              # Extract skip reason from output
              skip_reason=$(echo "$output" | grep "^SKIP_REASON=" | cut -d'=' -f2-)
              echo "reason=$skip_reason" >> $GITHUB_OUTPUT
              exit 1
            else
              # Script returned 2 (error)
              echo "::error::Script execution failed with exit code $exit_code"
              exit $exit_code
            fi
          fi

  publish-dry-run-sys-crates:
    if: github.repository_owner == 'aws'
    name: publish dry-run (sys crates)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust: [ stable ]
        os: [ windows-latest, ubuntu-latest, macos-13, macos-latest ]
        crate: [ aws-lc-sys, aws-lc-fips-sys ]
        args:
          - publish --dry-run
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - run: go version
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - if: ${{ matrix.os == 'windows-latest' }}
        uses: ilammy/setup-nasm@v1
      - name: Install ninja-build tool
        if: ${{ matrix.os == 'windows-latest' }}
        uses: seanmiddleditch/gha-setup-ninja@v4
      - uses: dtolnay/rust-toolchain@master
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: ${{ matrix.crate }}
        working-directory: ./${{ matrix.crate }}
        run: cargo ${{ matrix.args }}
      - name: Clean
        run: cargo clean
      - name: Force Linux shared build
        env:
          AWS_LC_SYS_STATIC: 0
          AWS_LC_FIPS_SYS_STATIC: 0
        working-directory: ./${{ matrix.crate }}
        run: cargo publish --dry-run

  publish-dry-run-main-crate:
    if: github.repository_owner == 'aws' && needs.publish-dry-run-version-check.outputs.skip-aws-lc-rs != 'true'
    name: publish dry-run (aws-lc-rs)
    needs: publish-dry-run-version-check
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust: [ stable ]
        os: [ windows-latest, ubuntu-latest, macos-13, macos-latest ]
        args:
          - publish --dry-run
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - run: go version
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - if: ${{ matrix.os == 'windows-latest' }}
        uses: ilammy/setup-nasm@v1
      - name: Install ninja-build tool
        if: ${{ matrix.os == 'windows-latest' }}
        uses: seanmiddleditch/gha-setup-ninja@v4
      - uses: dtolnay/rust-toolchain@master
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: aws-lc-rs
        working-directory: ./aws-lc-rs
        run: cargo ${{ matrix.args }}
      - name: Clean
        run: cargo clean
      - name: Force Linux shared build
        env:
          AWS_LC_SYS_STATIC: 0
          AWS_LC_FIPS_SYS_STATIC: 0
        working-directory: ./aws-lc-rs
        run: cargo publish --dry-run

  ## Verify that prebuilt-nasm objects were published properly
  publish-dry-run-prebuild-nasm:
    if: github.repository_owner == 'aws'
    name: publish dry-run prebuilt-nasm
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        args:
          - publish --dry-run
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: dtolnay/rust-toolchain@master
        id: toolchain
        with:
          toolchain: stable
      - name: Set Rust toolchain override
        run: rustup override set ${{ steps.toolchain.outputs.name }}
      - name: Remove NASM
        shell: bash
        run: |
          rm -f `which nasm`
      - name: Verify NASM not available
        shell: bash
        run: |
          if nasm --version; then
            echo `which nasm`
            exit 1
          else
            exit 0;
          fi
      - working-directory: ./aws-lc-sys
        shell: bash
        run: AWS_LC_SYS_PREBUILT_NASM=1 cargo publish --dry-run

  msrv:
    name: Minimum Supported Rust Version
    if: github.repository_owner == 'aws'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-13, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          lfs: true

      - if: ${{ startsWith(matrix.os, 'macos-') }}
        run: |
          brew install llvm
          echo 'LIBCLANG_PATH=${{ (matrix.os == 'macos-13' && '/usr/local') || '/opt/homebrew' }}/opt/llvm/lib' >> $GITHUB_ENV
          echo 'LLVM_CONFIG_PATH=${{ (matrix.os == 'macos-13' && '/usr/local') || '/opt/homebrew' }}/opt/llvm/bin/llvm-config' >> $GITHUB_ENV
      - name: Install NASM on Windows
        if: runner.os == 'Windows'
        uses: ilammy/setup-nasm@v1

      - name: Install MSRV Rust version
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.70.0 # TODO: dynamically identify MSRV

      - name: Update dependencies
        run: |
          cargo +1.70.0 update
          cargo +1.70.0 update -p libloading --precise 0.8.8
          cargo +1.70.0 tree

      - name: Verify msrv
        working-directory: ./aws-lc-rs
        run: cargo +1.70.0 check --features bindgen
